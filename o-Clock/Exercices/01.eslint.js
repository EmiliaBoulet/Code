// Voici du code fonctionnel.
// Mais fonctionnel ne veut pas dire propre !
// Comme tu peux le constater, il y a du rouge un peu partout dans le fichier !

// Si tu ne vois pas de rouge, c'est le moment d'installer l'extension 'ESLint' de VSCode, de red√©marrer VSCode et de l'ouvrir √† la racine du repo.
//      Toujours pas ? R√©installe les d√©pendances du projet via `npm install` √† la racine du repo.

// Si tu vois du rouge, tr√®s bien, c'est l'occasion de lire les messages d'erreurs associ√©s (en survolant ces lignes rouges) et les corriger en cons√©quence.


// ETAPE 1 - corriger les erreurs ESLint

var buttonSwitch = document.querySelector("button")
buttonSwitch.addEventListener ("click", function(event) { 
        var newText = document.querySelector("p");
        newText.textContent = buildNewButtonText(); //this line changes the text of the button
});


function buildNewButtonText (){
    return  ('üôà Oh non, je suis d√©masqu√© ! üôà');
    console.log("J'ai un doute sur l'utilit√© de cette ligne...");
};


// ETAPE 2 - refactor

// Bon, tout de m√™me... 'truc' et 'machin' c'est pas dingue comme nom de variable ! Comment les renommer ?
// V√©rifie toute de m√™me que le code n'est pas cass√© dans ton navigateur :)


// ETAPE 3 - nouvelle r√®gle ESLint

// Bon, le mot cl√© 'var' pour d√©finir une variable, c'est soooo 2010.
// Et si on ajoutait une r√®gle dans la config ESLint du projet afin que notre IDE (ie. VSCode)
// nous pr√©viennent lorsqu'on utilise 'var' ?

// Pour cela, il y a un fichier .eslintrc juste √† c√¥t√© de ce fichier.
// A l'aide de Google et la doc ESLint, trouve la r√®gle qu'il faut rajouter √† ce fichier de config pour obtenir ce resultat.
// A pr√©sent, lorsque tu tape 'var', tu devrais aussi avoir une erreur ! Bien jou√© !